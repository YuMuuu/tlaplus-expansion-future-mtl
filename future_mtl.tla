----------------------------- MODULE FutureMTL -----------------------------
EXTENDS Naturals, Sequences, TLC

(***************************************************************************)
(* 補助: X の n 回反復                                                        *)
(***************************************************************************)
RECURSIVE NextN(_, _)

NextN(n, φ(_)) ==
  IF n = 0
    THEN φ
    ELSE Next(NextN(n-1, φ))

(***************************************************************************)
(* 区間型の定義                                                               *)
(***************************************************************************)
Interval == [type : {"closed", "from"}, l : Nat, u : Nat]

Closed(l, u) == [type |-> "closed", l |-> l, u |-> u]
From(l)      == [type |-> "from",   l |-> l, u |-> 0]

(***************************************************************************)
(* 大析取 / 大連言                                                            *)
(***************************************************************************)
BigOr(f(_), l, u) ==
  \E k \in l..u: f(k)

BigAnd(f(_), l, u) ==
  \A k \in l..u: f(k)

(***************************************************************************)
(* 区間付き Finally, Globally, Until                                          *)
(***************************************************************************)
F_I(I, φ(_)) ==
  IF I.type = "closed"
    THEN BigOr(LAMBDA k: NextN(k, φ), I.l, I.u)
    ELSE NextN(I.l, <> φ)

G_I(I, φ(_)) ==
  IF I.type = "closed"
    THEN BigAnd(LAMBDA k: NextN(k, φ), I.l, I.u)
    ELSE NextN(I.l, [] φ)

U_I(I, φ(_), ψ(_)) ==
  IF I.type = "closed"
    THEN BigOr(LAMBDA k: UntilAt(k, φ, ψ), I.l, I.u)
    ELSE IF I.l = 0
           THEN (φ) ~> (ψ)   \* TLA+ の Until/LeadsTo を利用
           ELSE /\ BigAnd(LAMBDA m: NextN(m, φ), 0, I.l-1)
                /\ NextN(I.l, φ ~> ψ)

(***************************************************************************)
(* untilAt の定義: 長さ k ちょうどで ψ が起こる展開                          *)
(***************************************************************************)
RECURSIVE UntilAt(_, _, _)

UntilAt(0, φ(_), ψ(_)) == ψ
UntilAt(k, φ(_), ψ(_)) ==
  /\ φ
  /\ Next(UntilAt(k-1, φ, ψ))
=============================================================================


VARIABLE p, q

φ == p
ψ == q

Ex1 == F_I(Closed(1,3), ψ)   \* [1,3] で ψ が eventually
Ex2 == G_I(From(2), φ)       \* [2,∞) で φ が常に成り立つ
Ex3 == U_I(Closed(0,2), φ, ψ)
